import { ethers } from "hardhat";
import { SignerWithAddress } from "@nomicfoundation/hardhat-ethers/signers";
import { CreatorContract, CreatorContract__factory } from "../typechain-types";

async function main(): Promise<void> {
  // 1. Get the deployer account and type it
  let deployer: SignerWithAddress;
  [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with the account:", deployer.address);

  // 2. Get the strongly-typed Contract Factory
  // The type 'CreatorContract__factory' is auto-generated by TypeChain during compilation.
  const CreatorContractFactory: CreatorContract__factory = 
    await ethers.getContractFactory("CreatorContract");

  // 3. Deploy the contract with type safety
  // The deploy function still takes the constructor arguments.
  // The returned object is now strongly typed as 'CreatorContract'.
  console.log("Deploying CreatorContract...");
  const creatorContract: CreatorContract = 
    await CreatorContractFactory.deploy(deployer.address);

  // 4. Wait for the contract to be deployed
  await creatorContract.waitForDeployment();
  
  // 5. Log the address of the deployed contract
  // Using getAddress() is the standard and type-safe way to get the contract address.
  const contractAddress = await creatorContract.getAddress();
  console.log(`CreatorContract deployed to: ${contractAddress}`);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch((error: Error) => {
    console.error(error);
    process.exit(1);
  });